%{
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include "logic.h"
int yylex(void);
void yyerror(char *s);
int i = 0;
int method = 0;
nodeType *createNodeOper1(int oper, nodeType* child);
nodeType *createNodeOper2(int oper, nodeType* leftChild, nodeType* rightChild);
nodeType *createNodeValue(int value);
nodeType *createNodeVariable(char variable);
void printTree(nodeType* tree);
%}

%union {
	int value; /* integer value */
	char index; /* symbol table index */
	nodeType *ptr; /* node pointer */
};

%token <value> NUM
%token <index> VARIABLE
%type <ptr> expr
%nonassoc NOT
%left AND OR NOR XOR NAND

%%
program:
	program statement '\n'
	|
	;

//ma byc funkcja ktora przerobi drzewo
statement:
	expr '\n'  { printTree($1);}
	| VARIABLE '=' expr  { printf("dupa variable cos tam");}
	;

expr:expr AND expr {$$=createNodeOper2(AND, $1, $3);}
|expr NAND expr {$$=createNodeOper2(NAND, $1, $3);}
|expr OR expr {$$=createNodeOper2(OR, $1, $3);}
|NOT expr {$$=createNodeOper1(NOT, $2);}
|expr NOR expr {$$=createNodeOper2(NOR, $1, $3);}
|expr XOR expr {$$=createNodeOper2(XOR, $1, $3);}
|NUM {$$=createNodeValue($1);}
|VARIABLE {$$=createNodeVariable($1);}
;

%%

void yyerror(char *s) {
 fprintf(stderr, "%s\n", s);
}

int main(int argc, char** argv) {
    if(argc==2)
    {
        if(strcmp(argv[1], "-cnf") == 0) {
		method = 1;
	}
        if(strcmp(argv[1], "-dnf") == 0) {
		method = 2;
	}
        if(strcmp(argv[1], "-nor") == 0) {
		method = 3;
	}
	if(strcmp(argv[1], "-nand") == 0) {
		method = 4;
	}
    }
    else
    {
	printf("Not enough parameters\n");
	return 1;
    }

 yyparse();
 return 0;
}


nodeType *createNodeOper1(int oper, nodeType* child)
{
	printf("nodeOper1\n");
	nodeType *p;
	if ((p = malloc(sizeof(nodeType) + sizeof(nodeType *))) == NULL)
		yyerror("out of memory");
	
	p->type = typeOpr;
	p->opr.oper = oper;
	p->opr.nops = 1;
	p->opr.op[0] = child;
	return p;
}
nodeType *createNodeOper2(int oper, nodeType* leftChild, nodeType* rightChild)
{
	printf("nodeOper2\n");

	nodeType *p;
	if ((p = malloc(sizeof(nodeType) + ( 2 * sizeof(nodeType *)))) == NULL)
		yyerror("out of memory");
	
	p->type = typeOpr;
	p->opr.oper = oper;
	p->opr.nops = 2;
	p->opr.op[0] = leftChild;
	p->opr.op[1] = rightChild;
	return p;
}
nodeType *createNodeValue(int value)
{
	
	printf("nodeValue\n");
	return NULL;
}

nodeType *createNodeVariable(char variable)
{
	printf("create node variable\n");
	nodeType *p;
	if ((p = malloc(sizeof(nodeType))) == NULL)
		yyerror("out of memory");
	p->type = typeCon;
	p->con.value = variable;
	return p;
}

void printTree(nodeType* tree)
{
	
	printf("printing tree\n");
}
